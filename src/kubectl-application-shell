#!/usr/bin/env bash
# kubectl-application-shell
# Create a temporary container according to command line flags.
#


while [ -n "$1" ]; do
    case "$1" in
    --namespace) namespace=$2 && echo "namespace = $namespace" ;;
    --deployment) deployment=$2 && echo "deployment = $deployment" ;;
    --limits) limits=$2 && echo "limits = $limits" ;;
    --requests) requests=$2 && echo "requests = $requests" ;;
    --*) echo "Option $1 not recognized" ;;

    esac
    shift
done

# optional argument handling
if [[ "$1" == "version" ]]
then
    echo "1.0.0"
    exit 0
fi

# optional argument handling
if [[ "$1" == "help" ]]
then
    echo "example: kubectl application shell --deployment my-deployment-name --namespace my-namespace"
    exit 0
fi

if [[ "$deployment" == "" ]]
then
    echo "Missing deployment."
    exit 1
fi

if [[ "$namespace" == "" ]]
then
    echo "Missing namespace."
    exit 1
fi

if [[ "$limits" == "" ]]
then
    echo "Missing limits. Using the first currently deployed limits from the deployment name."
    cpulimit=$(kubectl get deployment --namespace="$namespace" "$deployment" -o=jsonpath='{$.spec.template.spec.containers[:1].resources.limits.cpu}')
    memorylimit=$(kubectl get deployment --namespace="$namespace" "$deployment" -o=jsonpath='{$.spec.template.spec.containers[:1].resources.limits.memory}')
    if [[ "$cpulimit" == "" ]]
    then
        echo "Your deployment does not have a cpu limit in place. Using default cpu limit."
        cpulimit="none"
    fi
    if [[ "$memorylimit" == "" ]]
    then
        echo "Your deployment does not have a memory limit in place. Using default memory limit."
        memorylimit="none"
    fi
fi

if [[ "$requests" == "" ]]
then
    echo "Missing requests. Using the first currently deployed requests from the deployment name."
    cpurequest=$(kubectl get deployment --namespace="$namespace" "$deployment" -o=jsonpath='{$.spec.template.spec.containers[:1].resources.requests.cpu}')
    memoryrequest=$(kubectl get deployment --namespace="$namespace" "$deployment" -o=jsonpath='{$.spec.template.spec.containers[:1].resources.requests.memory}')
    if [[ "$cpurequest" == "" ]]
    then
        echo "Your deployment does not have a cpu request in place. Using default cpu request."
        cpurequest="none"
    fi
    if [[ "$memoryrequest" == "" ]]
    then
        echo "Your deployment does not have a memory request in place. Using default memory request."
        memoryrequest="none"
    fi
fi

deploymentInfo=$(kubectl get deployment --namespace="$namespace" "$deployment" -o json)
image=$(echo "${deploymentInfo}" | jq '.spec.template.spec.containers[0].image')
containerName=$(echo "${deploymentInfo}" | jq '.spec.template.spec.containers[0].name')
env=$(echo "${deploymentInfo}" | jq '.spec.template.spec.containers[0].env')
envFrom=$(echo "${deploymentInfo}" | jq '.spec.template.spec.containers[0].envFrom')
annotations=$(echo "${deploymentInfo}" | jq '.spec.template.metadata.annotations')

overrides=$(echo "{
  \"metadata\": {
    \"annotations\": ${annotations}
  },
  \"spec\": {
    \"containers\": [
      {
        \"name\": ${containerName},
        \"image\": ${image},
        \"args\": [\"/bin/bash\"],
        \"envFrom\": ${envFrom},
        \"env\": ${env},
        \"stdin\": true,
        \"stdinOnce\": true,
        \"tty\": true,
        \"resources\": {
           \"limits\": {
             \"cpu\": \"1\",
             \"memory\": \"4Gi\"
           },
           \"requests\": {
             \"cpu\": \"1\",
             \"memory\": \"4Gi\"
           }
        }
      }
    ]
  }
}" | jq -c .)

if [[ "$memorylimit" == "none" ]] && [[ "$cpulimit" == "none" ]] && [[ "$limits" == "" ]]
then
    limits=""
elif [[ "$memorylimit" == "none" ]] && [[ ! "$cpulimit" == "none" ]] && [[ "$limits" == "" ]]
then
    limits="cpu=$cpulimit"
elif [[ ! "$memorylimit" == "none" ]] && [[ "$cpulimit" == "none" ]] && [[ "$limits" == "" ]]
then
    limits="memory=$memorylimit"
elif [[ ! "$memorylimit" == "none" ]] && [[ ! "$cpulimit" == "none" ]] && [[ "$limits" == "" ]]
then
    limits="cpu=$cpulimit,memory=$memorylimit"
fi

if [[ "$memoryrequest" == "none" ]] && [[ "$cpurequest" == "none" ]] && [[ "$requests" == "" ]]
then
    requests=""
elif [[ "$memoryrequest" == "none" ]] && [[ ! "$cpurequest" == "none" ]] && [[ "$requests" == "" ]]
then
    requests="cpu=$cpurequest"
elif [[ ! "$memoryrequest" == "none" ]] && [[ "$cpurequest" == "none" ]] && [[ "$requests" == "" ]]
then
    requests="memory=$memoryrequest"
elif [[ ! "$memoryrequest" == "none" ]] && [[ ! "$cpurequest" == "none" ]] && [[ "$requests" == "" ]]
then
    requests="cpu=$cpurequest,memory=$memoryrequest"
fi

kubectl_run_cmd="kubectl run \
-it \
--rm \
--restart=Never \
--namespace=\"$namespace\" \
--limits=$limits \
--requests=$requests \
--image=$image \
\"debug-$deployment-$RANDOM\" \
--overrides='${overrides}'"

echo "Running command: ${kubectl_run_cmd}"
eval "${kubectl_run_cmd}"
