#!/usr/bin/env bash
# kubectl-application-shell
# Create a temporary container according to command line flags.
#

#!/bin/bash

while [ -n "$1" ]; do # while loop starts
	case "$1" in
	--namespace) namespace=$2 && echo "namespace = $namespace" ;;
  --name) name=$2 && echo "name = $name" ;;
	--image) image=$2 && echo "image = $image" ;;
	--config) config=$2 && echo "config = $config" ;;
	--*) echo "Option $1 not recognized" ;;

	esac
	shift
done

# optional argument handling
if [[ "$1" == "version" ]]
then
    echo "1.0.0"
    exit 0
fi

if [[ "$name" == "" ]]
then
    echo "Missing name."
    exit 1
fi

if [[ "$namespace" == "" ]]
then
    echo "Missing namespace."
    exit 1
fi

if [[ "$image" == "" ]]
then
    echo "Missing image. Using currently deployed image from the deployment name."
    image=`kubectl get deployment --namespace=$namespace $name -o=jsonpath='{$.spec.template.spec.containers[:1].image}'`
fi

if [[ ! "$image" =~ ":" ]]
then
    if [[ $image == "" ]]
    then
        echo "Missing explicit image tag."
        exit 1
    fi
fi

if [[ "$config" == "" ]]
then
    echo "Missing config map. Using currently deployed config-map from the deployment name."
    config=`kubectl get deployment --namespace=$namespace $name -o=jsonpath='{$.spec.template.spec.containers[:1].envFrom[0].configMapRef.name}'`
fi

overrides="
{
  \"spec\": {
    \"containers\": [
      {
        \"name\": $name,
        \"image\": $image,
        \"args\": [\"/bin/bash\"],
        \"envFrom\": [
          {
            \"configMapRef\": {
              \"name\": $config
            }
          }
        ],
        \"stdin\": true,
        \"stdinOnce\": true,
        \"tty\": true
      }
    ]
  }
}"

kubectl run -it --rm --namespace=$namespace $name-$RANDOM --image=$image --restart=Never --overrides=$overrides