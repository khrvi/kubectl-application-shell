#!/usr/bin/env bash
# kubectl-application-shell
# Create a temporary container according to command line flags.
#

#!/bin/bash

while [ -n "$1" ]; do # while loop starts
	case "$1" in
	--namespace) namespace=$2 && echo "namespace = $namespace" ;;
        --name) name=$2 && echo "name = $name" ;;
	--image) image=$2 && echo "image = $image" ;;
	--config) config=$2 && echo "config = $config" ;;
	--secret) secret=$2 && echo "secret = $secret" ;;
        --limits) limits=$2 && echo "limits = $limits" ;;
        --requests) requests=$2 && echo "requests = $requests" ;;
	--*) echo "Option $1 not recognized" ;;

	esac
	shift
done

# optional argument handling
if [[ "$1" == "version" ]]
then
    echo "1.0.0"
    exit 0
fi

# optional argument handling
if [[ "$1" == "help" ]]
then
    echo "example: kubectl application shell --name my-deployment-name --namespace my-namespace"
    exit 0
fi

if [[ "$name" == "" ]]
then
    echo "Missing name."
    exit 1
fi

if [[ "$namespace" == "" ]]
then
    echo "Missing namespace."
    exit 1
fi

if [[ "$limits" == "" ]]
then
    echo "Missing limits. Using the first currently deployed limits from the deployment name."
    cpulimit=$(kubectl get deployment --namespace="$namespace" "$name" -o=jsonpath='{$.spec.template.spec.containers[:1].resources.limits.cpu}')
    memorylimit=$(kubectl get deployment --namespace="$namespace" "$name" -o=jsonpath='{$.spec.template.spec.containers[:1].resources.limits.memory}')
fi

if [[ "$requests" == "" ]]
then
    echo "Missing requests. Using the first currently deployed requests from the deployment name."
    cpurequests=$(kubectl get deployment --namespace="$namespace" "$name" -o=jsonpath='{$.spec.template.spec.containers[:1].resources.requests.cpu}')
    memoryrequests=$(kubectl get deployment --namespace="$namespace" "$name" -o=jsonpath='{$.spec.template.spec.containers[:1].resources.requests.memory}')
fi

if [[ "$image" == "" ]]
then
    echo "Missing image. Using the first currently deployed image from the deployment name."
    image=$(kubectl get deployment --namespace="$namespace" "$name" -o=jsonpath='{$.spec.template.spec.containers[:1].image}')
fi

if [[ ! "$image" =~ ":" ]]
then
    if [[ $image == "" ]]
    then
        echo "Missing explicit image tag."
        exit 1
    fi
fi

if [[ "$config" == "" ]]
then
    echo "Missing config map. Using the first currently deployed config-map from the deployment name."
    config=$(kubectl get deployment --namespace="$namespace" "$name" -o=jsonpath='{$.spec.template.spec.containers[:1].envFrom[0].configMapRef.name}')
fi

if [[ "$secret" == "" ]]
then
    echo "Missing secret map. Using currently deployed secret-map from the deployment name, if there is one."
    secret=$(kubectl get deployment --namespace="$namespace" "$name" -o=jsonpath='{$.spec.template.spec.containers[:1].envFrom[0].secretRef.name}')
fi

overrides_start="{
  \"spec\": {
    \"containers\": [
      {
        \"name\": \"$name\",
        \"image\": \"$image\",
        \"args\": [\"/bin/bash\"],
        \"envFrom\": [
          {
            \"configMapRef\": {
              \"name\": \"$config\"
            }
          }"
secretoverride=",
          {
            \"secretRef\": {
              \"name\": \"$secret\"
            }
          }
"
overrides_end="
        ],
        \"stdin\": true,
        \"stdinOnce\": true,
        \"tty\": true
      }
    ]
  }
}"

if [[ "$secret" == "" ]]
then
  overrides=$overrides_start$overrides_end
else
  overrides=$overrides_start$secretoverride$overrides_end
fi

echo running: kubectl run -it --rm --namespace="$namespace" "$name-$RANDOM" --image="$image" --restart=Never --limits=$limits --requests=$requests --overrides="$overrides"
kubectl run -it --rm --namespace="$namespace" "$name-$RANDOM" --image="$image" --restart=Never --limits="cpu=$cpulimit,memory=$memorylimit" --requests="cpu=$cpurequest,memory=$memoryrequest" --overrides="$overrides"
